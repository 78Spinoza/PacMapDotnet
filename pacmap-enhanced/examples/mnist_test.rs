use ndarray::{Array2, Array1};
use ndarray_npy::{read_npy, write_npy};
use pacmap::Configuration;
use std::time::Instant;
use crate::{fit_transform_quantized, PaCMAP};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Load MNIST data (expects .npy files generated by convert_mnist.py)
    let data: Array2<f64> = read_npy("mnist_data.npy")?;
    let _labels: Array1<i32> = read_npy("mnist_labels.npy")?;
    let config = Configuration::builder().n_neighbors(10).n_dims(2).seed(42).build();

    let start = Instant::now();
    let (embedding, model) = fit_transform_quantized(data.clone(), config)?;
    println!("Fit time: {}s", start.elapsed().as_secs_f64());
    println!("Stats: mean={:.2}, p95={:.2}, max={:.2}",
             model.stats.mean_distance, model.stats.p95_distance, model.stats.max_distance);

    // Save results
    write_npy("embedding_f16.npy", &embedding)?;
    model.save_compressed("pacmap_model.zstd")?;
    let loaded = PaCMAP::load_compressed("pacmap_model.zstd")?;
    assert_eq!(model.embedding, loaded.embedding);

    Ok(())
}
